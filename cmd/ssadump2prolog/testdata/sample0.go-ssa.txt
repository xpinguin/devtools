# Name: (*github.com/leveltravel/go-util/external-requests.request).Do
# Package: github.com/leveltravel/go-util/external-requests
# Location: C:\_go\wrk\src\github.com\leveltravel\go-util\external-requests\requests.go:69:19
func (r *request) Do() (err error):
0:                                                                entry P:0 S:1
	t0 = &r.startedAt [#11]                                      *time.Time
	t1 = time.Now()                                               time.Time
	*t0 = t1
	jump 1
1:                                                             for.body P:2 S:2
	t2 = phi [0: 0:int, 10: t59] #retryNo                               int
	t3 = (*request).perform(r)                                        error
	t4 = t3 != nil:error                                               bool
	if t4 goto 3 else 4
2:                                                             for.done P:2 S:0
	t5 = (*request).execCallback(r)                                   error
	return t5
3:                                                              if.then P:1 S:0
	return t3
4:                                                              if.done P:1 S:2
	t6 = t2 > 0:int                                                    bool
	if t6 goto 5 else 6
5:                                                              if.then P:1 S:1
	t7 = new [1]interface{} (varargs)                       *[1]interface{}
	t8 = &t7[0:int]                                            *interface{}
	t9 = make interface{} <- int (t2)                           interface{}
	*t8 = t9
	t10 = slice t7[:]                                         []interface{}
	t11 = fmt.Sprintf(" [#%d]":string, t10...)                       string
	jump 6
6:                                                              if.done P:2 S:2
	t12 = phi [4: "":string, 5: t11] #retryStr                       string
	t13 = &r.name [#0]                                              *string
	t14 = *t13                                                       string
	t15 = &r.httpresp [#10]                             **net/http.Response
	t16 = *t15                                           *net/http.Response
	t17 = &t16.StatusCode [#1]                                         *int
	t18 = *t17                                                          int
	t19 = &r.httpresp [#10]                             **net/http.Response
	t20 = *t19                                           *net/http.Response
	t21 = &t20.StatusCode [#1]                                         *int
	t22 = *t21                                                          int
	t23 = net/http.StatusText(t22)                                   string
	t24 = &r.startedAt [#11]                                     *time.Time
	t25 = *t24                                                    time.Time
	t26 = time.Since(t25)                                     time.Duration
	t27 = (time.Duration).Seconds(t26)                              float64
	t28 = &r.httpreq [#9]                                **net/http.Request
	t29 = *t28                                            *net/http.Request
	t30 = &t29.URL [#1]                                       **net/url.URL
	t31 = *t30                                                 *net/url.URL
	t32 = (*net/url.URL).String(t31)                                 string
	t33 = new [6]interface{} (varargs)                      *[6]interface{}
	t34 = &t33[0:int]                                          *interface{}
	t35 = make interface{} <- string (t14)                      interface{}
	*t34 = t35
	t36 = &t33[1:int]                                          *interface{}
	t37 = make interface{} <- int (t18)                         interface{}
	*t36 = t37
	t38 = &t33[2:int]                                          *interface{}
	t39 = make interface{} <- string (t23)                      interface{}
	*t38 = t39
	t40 = &t33[3:int]                                          *interface{}
	t41 = make interface{} <- float64 (t27)                     interface{}
	*t40 = t41
	t42 = &t33[4:int]                                          *interface{}
	t43 = make interface{} <- string (t12)                      interface{}
	*t42 = t43
	t44 = &t33[5:int]                                          *interface{}
	t45 = make interface{} <- string (t32)                      interface{}
	*t44 = t45
	t46 = slice t33[:]                                        []interface{}
	t47 = log("%s: %v %s in %.2f...":string, t46...)                     ()
	t48 = &r.retryIfWait [#17]    *func(Request, int) (bool, time.Duration)
	t49 = *t48                     func(Request, int) (bool, time.Duration)
	t50 = t49 == nil:func(Request, int) (bool, time.Duration)          bool
	if t50 goto 2 else 7
7:                                                              if.done P:1 S:2
	t51 = &r.retryIfWait [#17]    *func(Request, int) (bool, time.Duration)
	t52 = *t51                     func(Request, int) (bool, time.Duration)
	t53 = make Request <- *request (r)                              Request
	t54 = t52(t53, t2)                                (bool, time.Duration)
	t55 = extract t54 #0                                               bool
	t56 = extract t54 #1                                      time.Duration
	if t55 goto 8 else 2
8:                                                              if.done P:1 S:2
	t57 = t56 > 0:time.Duration                                        bool
	if t57 goto 9 else 10
9:                                                              if.then P:1 S:1
	t58 = time.Sleep(t56)                                                ()
	jump 10
10:                                                             if.done P:2 S:1
	t59 = t2 + 1:int                                                    int
	jump 1
